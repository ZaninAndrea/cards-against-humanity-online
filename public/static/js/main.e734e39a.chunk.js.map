{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","window","io","sortByScore","a","b","score","Scoreboard","scoreboard","lastPlayer","className","sort","map","player","name","App","props","console","log","state","players","cards","blackCard","playerType","gameState","selectedWhiteCard","proposedWhiteCards","lockedCard","blackPlayer","joinedGame","playerName","on","setState","card","id","filter","text","this","dangerouslySetInnerHTML","__html","replace","onClick","emit","length","disabled","placeholder","value","onChange","e","target","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e734e39a.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./App.css\"\n\nlet socket = window.io()\n\nconst sortByScore = (a, b) =>\n    a.score > b.score ? -1 : a.score < b.score ? 1 : 0\n\nfunction Scoreboard({ scoreboard, lastPlayer }) {\n    return (\n        <div className=\"scoreboard\">\n            <div className=\"title\">Scoreboard</div>\n            {scoreboard.sort(sortByScore).map(player => (\n                <div className={player.name === lastPlayer ? \"lastPlayer\" : \"\"}>\n                    {player.score} - {player.name}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        console.log(socket)\n        super(props)\n\n        this.state = {\n            players: [], // TODO: fetch from the server\n            cards: [],\n            blackCard: null,\n            playerType: \"WHITE\",\n            gameState: \"LOBBY\", // TODO: fetch from the server\n            selectedWhiteCard: null,\n            proposedWhiteCards: [],\n            lockedCard: false,\n            blackPlayer: \"\",\n            scoreboard: [],\n            joinedGame: false,\n            playerName: null,\n            lastPlayer: null,\n        }\n\n        socket.on(\"new player\", player => {\n            this.setState(({ players }) => ({\n                players: [...players, player],\n            }))\n        })\n        socket.on(\"game start\", () => {\n            this.setState({ gameState: \"PLAYING\" })\n        })\n        socket.on(\"new cards\", cards => {\n            this.setState({ cards })\n        })\n        socket.on(\"player black\", () => {\n            this.setState({ playerType: \"BLACK\" })\n        })\n        socket.on(\"player white\", () => {\n            this.setState({ playerType: \"WHITE\" })\n        })\n        socket.on(\"black card\", card => {\n            this.setState({ blackCard: card })\n        })\n        socket.on(\"player disconnect\", ({ name, id }) => {\n            this.setState(({ players }) => ({\n                players: players.filter(player => player.id !== id),\n            }))\n        })\n        socket.on(\"proposed white cards\", cards => {\n            this.setState({ proposedWhiteCards: cards })\n        })\n        socket.on(\"scoreboard\", scoreboard => {\n            this.setState({ scoreboard })\n        })\n        socket.on(\"game end\", () => {\n            this.setState({\n                cards: [],\n                blackCard: null,\n                playerType: \"WHITE\",\n                gameState: \"LOBBY\",\n                selectedWhiteCard: null,\n                proposedWhiteCards: [],\n                lockedCard: false,\n                blackPlayer: \"\",\n            })\n        })\n        socket.on(\"another player black\", name => {\n            this.setState({ blackPlayer: name })\n        })\n        socket.on(\"chosen white card\", ({ text, player: { id, name } }) => {\n            this.setState({\n                selectedWhiteCard: null,\n                proposedWhiteCards: [],\n                lockedCard: false,\n                lastPlayer: name,\n            })\n        })\n    }\n\n    render() {\n        if (this.state.gameState === \"LOBBY\" || !this.state.joinedGame) {\n            return (\n                <div className=\"main lobby\">\n                    {this.state.scoreboard.length !== 0 ? (\n                        <Scoreboard\n                            scoreboard={this.state.scoreboard}\n                            lastPlayer={this.state.lastPlayer}\n                        />\n                    ) : (\n                        \"\"\n                    )}\n                    <div className=\"header\">Cards Against Humanity</div>\n                    <div id=\"lobbyPlayerList\">\n                        <div className=\"title\">Connected players</div>\n                        {this.state.players.map(player => (\n                            <div className=\"player\">{player.name}</div>\n                        ))}\n\n                        {this.state.joinedGame ? (\n                            <button\n                                onClick={() => {\n                                    socket.emit(\"start game\")\n                                }}\n                                id=\"start-game\"\n                                disabled={this.state.players.length < 3}\n                            >\n                                START GAME\n                            </button>\n                        ) : (\n                            <div>\n                                <input\n                                    placeholder=\"username\"\n                                    value={this.state.playerName}\n                                    onChange={e =>\n                                        this.setState({\n                                            playerName: e.target.value,\n                                        })\n                                    }\n                                />{\" \"}\n                                <button\n                                    onClick={() => {\n                                        this.setState({\n                                            joinedGame: true,\n                                        })\n                                        socket.emit(\n                                            \"join game\",\n                                            this.state.playerName\n                                        )\n                                    }}\n                                    disabled={!this.state.playerName}\n                                >\n                                    JOIN GAME\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            )\n        } else if (this.state.gameState === \"PLAYING\") {\n            if (this.state.playerType === \"WHITE\") {\n                return (\n                    <div className=\"main\">\n                        <Scoreboard\n                            scoreboard={this.state.scoreboard}\n                            lastPlayer={this.state.lastPlayer}\n                        />\n                        <div\n                            className=\"blackCard\"\n                            dangerouslySetInnerHTML={{\n                                __html: this.state.blackCard\n                                    ? this.state.selectedWhiteCard\n                                        ? this.state.blackCard.text.replace(\n                                              \"_\",\n                                              this.state.selectedWhiteCard\n                                          )\n                                        : this.state.blackCard.text\n                                    : \"\",\n                            }}\n                        ></div>\n\n                        <div className=\"tip\">\n                            {this.state.lockedCard\n                                ? \"Wait for others to choose\"\n                                : \"Choose the funniest card for \" +\n                                  this.state.blackPlayer}\n                        </div>\n                        <div className=\"whiteCards\">\n                            {this.state.cards.map(card => (\n                                <div\n                                    className={\n                                        this.state.selectedWhiteCard === card\n                                            ? \"whiteCard selected\"\n                                            : \"whiteCard\"\n                                    }\n                                    onClick={() => {\n                                        if (!this.state.lockedCard) {\n                                            this.setState({\n                                                lockedCard: true,\n                                                selectedWhiteCard: card,\n                                            })\n                                            socket.emit(\n                                                \"submit white card\",\n                                                card\n                                            )\n                                        }\n                                    }}\n                                    dangerouslySetInnerHTML={{\n                                        __html: card,\n                                    }}\n                                ></div>\n                            ))}\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"main\">\n                        <Scoreboard\n                            scoreboard={this.state.scoreboard}\n                            lastPlayer={this.state.lastPlayer}\n                        />\n                        <div\n                            className=\"blackCard\"\n                            dangerouslySetInnerHTML={{\n                                __html: this.state.blackCard\n                                    ? this.state.blackCard.text\n                                    : \"\",\n                            }}\n                        ></div>\n                        <div className=\"tip\">\n                            {this.state.proposedWhiteCards.length === 0\n                                ? \"Wait for the other players to choose a card\"\n                                : \"Choose the funniest card\"}\n                        </div>\n                        <div className=\"whiteCards\">\n                            {this.state.proposedWhiteCards.map(card => (\n                                <div\n                                    onClick={() =>\n                                        socket.emit(\n                                            \"choose white card\",\n                                            card.id\n                                        )\n                                    }\n                                    className=\"whiteCard\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: card.text,\n                                    }}\n                                ></div>\n                            ))}\n                        </div>\n                    </div>\n                )\n            }\n        }\n\n        return <div>Something went wrong, ups</div>\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}